//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from G:/dev/StellarisParser/StellarisParser.Core/grammar\stellaris.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class stellarisLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, IDENTIFIER=9, 
		INTEGER=10, STRING=11, COMMENT=12, SPACE=13, NL=14;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "IDENTIFIER", 
		"INTEGER", "INTEGERFRAG", "IDENITIFIERHEAD", "IDENITIFIERBODY", "STRING", 
		"COMMENT", "SPACE", "NL"
	};


	public stellarisLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public stellarisLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'='", "'>'", "'<'", "'.'", "'@'", "':'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "IDENTIFIER", "INTEGER", 
		"STRING", "COMMENT", "SPACE", "NL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "stellaris.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static stellarisLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x10', '\x66', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\a', '\n', '\x38', '\n', '\n', '\f', '\n', '\xE', '\n', ';', '\v', 
		'\n', '\x3', '\v', '\x5', '\v', '>', '\n', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x6', '\f', '\x43', '\n', '\f', '\r', '\f', '\xE', '\f', 
		'\x44', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'K', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', 'O', '\n', 
		'\xF', '\f', '\xF', '\xE', '\xF', 'R', '\v', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', 'X', '\n', '\x10', 
		'\f', '\x10', '\xE', '\x10', '[', '\v', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x2', '\x2', '\x13', 
		'\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', 
		'\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\x2', 
		'\x19', '\x2', '\x1B', '\x2', '\x1D', '\r', '\x1F', '\xE', '!', '\xF', 
		'#', '\x10', '\x3', '\x2', '\t', '\x4', '\x2', '-', '-', '/', '/', '\x3', 
		'\x2', '\x32', ';', '\x4', '\x2', '\x43', '\\', '\x63', '|', '\x4', '\x2', 
		'\x32', ';', '\x61', '\x61', '\x5', '\x2', '\f', '\f', '\xF', '\xF', '$', 
		'$', '\x4', '\x2', '\f', '\f', '\xF', '\xF', '\x5', '\x2', '\v', '\v', 
		'\xE', '\xE', '\"', '\"', '\x2', 'h', '\x2', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x3', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x5', '\'', '\x3', '\x2', '\x2', '\x2', '\a', ')', '\x3', '\x2', '\x2', 
		'\x2', '\t', '+', '\x3', '\x2', '\x2', '\x2', '\v', '-', '\x3', '\x2', 
		'\x2', '\x2', '\r', '/', '\x3', '\x2', '\x2', '\x2', '\xF', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x11', '\x33', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x15', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '\x42', '\x3', '\x2', '\x2', '\x2', '\x19', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', 'J', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'L', '\x3', '\x2', '\x2', '\x2', '\x1F', 'U', '\x3', '\x2', '\x2', '\x2', 
		'!', '^', '\x3', '\x2', '\x2', '\x2', '#', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '%', '&', '\a', '?', '\x2', '\x2', '&', '\x4', '\x3', '\x2', '\x2', 
		'\x2', '\'', '(', '\a', '@', '\x2', '\x2', '(', '\x6', '\x3', '\x2', '\x2', 
		'\x2', ')', '*', '\a', '>', '\x2', '\x2', '*', '\b', '\x3', '\x2', '\x2', 
		'\x2', '+', ',', '\a', '\x30', '\x2', '\x2', ',', '\n', '\x3', '\x2', 
		'\x2', '\x2', '-', '.', '\a', '\x42', '\x2', '\x2', '.', '\f', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x30', '\a', '<', '\x2', '\x2', '\x30', '\xE', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\a', '}', '\x2', '\x2', '\x32', 
		'\x10', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\a', '\x7F', '\x2', 
		'\x2', '\x34', '\x12', '\x3', '\x2', '\x2', '\x2', '\x35', '\x39', '\x5', 
		'\x19', '\r', '\x2', '\x36', '\x38', '\x5', '\x1B', '\xE', '\x2', '\x37', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x38', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', 
		'\x2', '\x2', '\x2', ':', '\x14', '\x3', '\x2', '\x2', '\x2', ';', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '<', '>', '\t', '\x2', '\x2', '\x2', '=', 
		'<', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', 
		'>', '?', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x5', '\x17', '\f', '\x2', 
		'@', '\x16', '\x3', '\x2', '\x2', '\x2', '\x41', '\x43', '\t', '\x3', 
		'\x2', '\x2', '\x42', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', '\x18', '\x3', '\x2', 
		'\x2', '\x2', '\x46', 'G', '\t', '\x4', '\x2', '\x2', 'G', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'K', '\x5', '\x19', '\r', '\x2', 'I', 'K', '\t', 
		'\x5', '\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 'J', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'K', '\x1C', '\x3', '\x2', '\x2', '\x2', 'L', 'P', 
		'\a', '$', '\x2', '\x2', 'M', 'O', '\n', '\x6', '\x2', '\x2', 'N', 'M', 
		'\x3', '\x2', '\x2', '\x2', 'O', 'R', '\x3', '\x2', '\x2', '\x2', 'P', 
		'N', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'S', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 
		'S', 'T', '\a', '$', '\x2', '\x2', 'T', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		'U', 'Y', '\a', '%', '\x2', '\x2', 'V', 'X', '\n', '\a', '\x2', '\x2', 
		'W', 'V', '\x3', '\x2', '\x2', '\x2', 'X', '[', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\\', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\\', ']', '\b', '\x10', '\x2', '\x2', ']', ' ', '\x3', '\x2', 
		'\x2', '\x2', '^', '_', '\t', '\b', '\x2', '\x2', '_', '`', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x61', '\b', '\x11', '\x2', '\x2', '\x61', '\"', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '\x63', '\t', '\a', '\x2', '\x2', '\x63', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\b', '\x12', '\x2', 
		'\x2', '\x65', '$', '\x3', '\x2', '\x2', '\x2', '\t', '\x2', '\x39', '=', 
		'\x44', 'J', 'P', 'Y', '\x3', '\x2', '\x3', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
